AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: production
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: myService
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: python
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc
  ExecutionRoleArn: 
    Type: String
    Default: ""
    Description: The task role Arn is the role under which the individual task is executing.
  ClusterName: 
    Type: String
    Default: ""
    Description: Name of the ECS cluster to be used.
  FargateContainerSecurityGroup:
    Type: String
    Default: ""
    Description: Security group to be used
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet::Id
  ThisVpc:
    Type: AWS::EC2::VPC::Id
    Default: vpc-1fcc2f75
  ListenerArn: 
    Type: String
    Default: ""
    Description: Listener arn to be used
  mySqlUsername:
    Type: String
    Default: ""
    Description: mySqlUsername to be passed
  mySqlsecretname:
    Type: String
    Default: ""
    Description: mySqlsecret_name to be passed
  mySqlregionname:
    Type: String
    Default: ""
    Description: mySqlregion_name to be passed
  mySqlServer:
    Type: String
    Default: ""
    Description: mySqlServer to be passed
  mySqlPort:
    Type: String
    Default: ""
    Description: mySqlPort to be passed
  AWSDEFAULTREGION:
    Type: String
    Default: ""
    Description: AWSDEFAULTREGION to be passed
  mySqlDatabase:
    Type: String
    Default: ""
    Description: mySqlDatabase to be passed
# Conditions:
#   HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: 
        Ref: 'ServiceName'
      Cpu: 
        Ref: 'ContainerCpu'
      Memory: 
        Ref: 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Ref: ExecutionRoleArn
        # Fn::ImportValue:
        #   !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Ref: ExecutionRoleArn
        # Fn::If:
        #   - 'HasCustomRole'
        #   - Ref: 'Role'
        #   - Ref: "AWS::NoValue"
      ContainerDefinitions:
        - Name: 
            Ref: 'ServiceName'
          Essential: true
          Cpu: 
            Ref: 'ContainerCpu'
          Memory: 
            Ref: 'ContainerMemory'
          Image: 
            Ref: 'ImageUrl'
          PortMappings:
            - ContainerPort: 
                Ref: 'ContainerPort'
          Environment:
            - Name: mySql_Username
              Value:
                Ref: mySqlUsername
            - Name: mySql_secret_name
              Value:
                Ref: mySqlsecretname
            - Name: mySql_region_name
              Value:
                Ref: mySqlregionname
            - Name: mySql_Server
              Value:
                Ref: mySqlServer
            - Name: mySql_Port
              Value:
                Ref: mySqlPort
            - Name: AWS_DEFAULT_REGION
              Value:
                Ref: AWSDEFAULTREGION
            - Name: mySql_Database
              Value:
                Ref: mySqlDatabase
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: 
                Ref: ServiceName
              awslogs-region: 
                Ref: 'AWS::Region'
              awslogs-stream-prefix: ecs

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: 
        Ref: 'ServiceName'
      EnableExecuteCommand: true
      Cluster:
        Ref: ClusterName
        # Fn::ImportValue:
        #   !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      # Role:
      #   Ref: Role
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 
        Ref: 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Ref: FargateContainerSecurityGroup
            # - Fn::ImportValue:
            #     !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Ref: PrivateSubnetOne
            - Ref: PrivateSubnetTwo
            # - Fn::ImportValue:
            #     !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            # - Fn::ImportValue:
            #     !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: 
        Ref: 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !
            Ref: 'ServiceName'
          ContainerPort:
            Ref: 'ContainerPort'
          TargetGroupArn: 
            Ref: 'TargetGroup'

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      TargetType: ip
      Name: 
        Ref: 'ServiceName'
      Port: 
        Ref: 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: 'ThisVpc'
        # Fn::ImportValue:
        #   !Join [':', [!Ref 'StackName', 'VPCId']]

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: 
            Ref: 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [Ref: 'Path']
      ListenerArn:
        Ref: 'ListenerArn'
        # Fn::ImportValue:
        #   !Join [':', [!Ref 'StackName', 'PublicListener']]
      Priority: 
        Ref: 'Priority'