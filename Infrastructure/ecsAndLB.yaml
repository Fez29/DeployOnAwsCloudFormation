Description: ECS cluster create and Load Balancer creation

Parameters:
  ThisVpc:
    Type: AWS::EC2::VPC::Id
    Default: vpc-1fcc2f75
  PublicSubnetOne:
    Type: AWS::EC2::Subnet::Id
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet::Id
  TagsKey1:
    Type: String
    Default: Division
  TagsValue1:
    Type: String
    Default: ClimatePartner Platforms

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      #ClusterName: MyCluster # TODO
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
            Logging: DEFAULT
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  # A security group for the containers we will run in Fargate.
  # Three rules, allowing network traffic from a public facing load
  # balancer, a private internal load balancer, and from other members
  # of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: 
        Ref: ThisVpc
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: 
        Ref: FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: 
        Ref: PublicLoadBalancerSG
  EcsSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private ALB
      GroupId: 
        Ref: FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: 
        Ref: PrivateLoadBalancerSG
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: 
        Ref: FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: 
        Ref: FargateContainerSecurityGroup

  # Load balancers for getting traffic to containers.
  # This sample template creates two load balancers:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.
  # - One private load balancer, hosted in private subnets, that only
  #   accepts traffic from other containers in the Fargate cluster, and is
  #   intended for private services that should not be accessed directly
  #   by the public.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 
        Ref: ThisVpc
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - Ref: PublicSubnetOne
        - Ref: PublicSubnetTwo
      SecurityGroups: [Ref: 'PublicLoadBalancerSG']
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: droptraffic1
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref ThisVpc
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
      - PublicLBCertificate
    Properties:
      DefaultActions:
        - TargetGroupArn: 
            Ref: DummyTargetGroupPublic
          Type: 'forward'
      LoadBalancerArn: 
        Ref: PublicLoadBalancer
      Certificates:
        - CertificateArn:
            Ref: PublicLBCertificate
      Port: 443
      Protocol: HTTPS
  PublicLBCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: "*.sensiblebizsolutions.com"
      ValidationMethod: DNS
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  PublicLoadBalancerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: 
        Ref: PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  # An internal load balancer, this would be used for a service that is not
  # directly accessible to the public, but instead should only receive traffic
  # from your other services.
  PrivateLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref ThisVpc
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  PrivateLoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Only accept traffic from a container in the fargate container security group
      GroupId: 
        Ref: PrivateLoadBalancerSG
      IpProtocol: -1
      SourceSecurityGroupId: 
        Ref: FargateContainerSecurityGroup
  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # This load balancer is put into the private subnet, so that there is no
        # route for the public to even be able to access the private load balancer.
        - Ref: PrivateSubnetOne
        - Ref: PrivateSubnetTwo
      SecurityGroups: [Ref: PrivateLoadBalancerSG]
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  # This dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: droptraffic2
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref ThisVpc
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
  PrivateLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PrivateLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: 
            Ref: DummyTargetGroupPrivate
          Type: 'forward'
      LoadBalancerArn: 
        Ref: PrivateLoadBalancer
      Port: 80
      Protocol: HTTP

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.https://www.linkedin.com/pulse/iam-roles-aws-ecs-rishabh-yadav-/
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
              #Route 53
              - "route53:ChangeResourceRecordSets"
              - "route53:CreateHealthCheck"
              - "route53:DeleteHealthCheck"
              - "route53:Get*"
              - "route53:List*"
              - "route53:UpdateHealthCheck"
              # Service Discovery
              - "servicediscovery:DeregisterInstance"
              - "servicediscovery:Get*"
              - "servicediscovery:List*"
              - "servicediscovery:RegisterInstance"
              - "servicediscovery:UpdateInstanceCustomHealthStatus"
              ##Autoscaling
              - "autoscaling:Describe"
              # AutoScalingPlanManagement
              - "autoscaling-plans:CreateScalingPlan"
              - "autoscaling-plans:DeleteScalingPlan"
              - "autoscaling-plans:DescribeScalingPlans"
              #RDS secretsmanager
              - "secretsmanager:*"
            Resource: '*'
      - PolicyName: AutoScalingManagement
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DeletePolicy"
              - "autoscaling:PutScalingPolicy"
              - "autoscaling:SetInstanceProtection"
              - "autoscaling:UpdateAutoScalingGroup"
            Resource: '*'
            # Condition:
            #   Null:
            #     - "autoscaling:ResourceTag/AmazonECSManaged": "false"
      - PolicyName: CWAlarmManagement
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:DeleteAlarms"
              - "cloudwatch:DescribeAlarms"
              - "cloudwatch:PutMetricAlarm"
            Resource: 'arn:aws:cloudwatch:*:*:alarm:*'
      - PolicyName: ECSTagging
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "ec2:CreateTags"
            Resource: 'arn:aws:ec2:*:*:network-interface/*'
      - PolicyName: CWLogGroupManagement
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:DescribeLogGroups"
              - "logs:PutRetentionPolicy"
            Resource: 'arn:aws:logs:*:*:log-group:/aws/ecs/*'
      - PolicyName: CWLogStreamManagement
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:DescribeLogStreams"
              - "logs:PutLogEvents"
            Resource: 'arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:**'
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1

# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#     },
#     # {
#     #   "Sid": "AutoScalingManagement",
#     #   "Effect": "Allow",
#     #   "Action": [
#     #    - "autoscaling:DeletePolicy"
#     #    - "autoscaling:PutScalingPolicy"
#     #    - "autoscaling:SetInstanceProtection"
#     #    - "autoscaling:UpdateAutoScalingGroup"
#     #   ],
#     #   "Resource": "*",
#     #   "Condition": {
#     #     "Null": {
#     #       "autoscaling:ResourceTag/AmazonECSManaged": "false"
#     #     }
#     #   }
#     # },


  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow access to Secrets Manager
                - 'secretsmanager:*'
                # Allow the ECS tasks to upload logs to CloudWatch
                - "logs:DescribeLogStreams"
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - "secretsmanager:*"
                - "ssmmessages:CreateControlChannel"
                - "ssmmessages:CreateDataChannel"
                - "ssmmessages:OpenControlChannel"
                - "ssmmessages:OpenDataChannel"
              Resource: '*'
      Tags: 
      ## Required tags
      - Key:
          Ref: TagsKey1
        Value:
          Ref: TagsValue1
# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  InternalUrl:
    Description: The url of the internal load balancer
    Value: !Join ['', ['http://', !GetAtt 'PrivateLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'InternalUrl' ] ]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]
  ExternalUrlForDns:
    Description: The url of the external load balancer without http
    Value: !GetAtt 'PublicLoadBalancer.DNSName'
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]
  PrivateListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PrivateLoadBalancerListener
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateListener' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref ThisVpc
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroup' ] ]